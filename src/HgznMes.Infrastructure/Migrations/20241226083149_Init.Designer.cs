// <auto-generated />
using System;
using HgznMes.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HgznMes.Infrastructure.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20241226083149_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HgznMes.Domain.Entities.Account.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer")
                        .HasColumnName("order_num");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_code");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("soft_deleted");

                    b.Property<bool>("State")
                        .HasColumnType("boolean")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("SoftDeleted")
                        .HasDatabaseName("ix_role_soft_deleted");

                    b.HasIndex("Name", "SoftDeleted")
                        .IsUnique()
                        .HasDatabaseName("ix_role_name_soft_deleted");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8df3280-8ab1-4b45-8d6a-6c3e669317ac"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "developer with all cathable resources even it was obselete",
                            Name = "developer",
                            OrderNum = 0,
                            RoleCode = "dev",
                            SoftDeleted = false,
                            State = true
                        },
                        new
                        {
                            Id = new Guid("4fe6ebb8-5001-40b4-a59e-d193ad9186f8"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "super user with all catchable resources",
                            Name = "super",
                            OrderNum = 0,
                            RoleCode = "super",
                            SoftDeleted = false,
                            State = true
                        },
                        new
                        {
                            Id = new Guid("e1f23f37-919c-453b-aff1-1214415e54b8"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "admin to manage user resourcs",
                            Name = "administrator",
                            OrderNum = 0,
                            RoleCode = "admin",
                            SoftDeleted = false,
                            State = true
                        },
                        new
                        {
                            Id = new Guid("4a15f57a-0cb7-4cc9-95c0-91ba672a341c"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "normal user with some basic resources",
                            Name = "member",
                            OrderNum = 0,
                            RoleCode = "member",
                            SoftDeleted = false,
                            State = true
                        });
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nick")
                        .HasColumnType("text")
                        .HasColumnName("nick");

                    b.Property<string>("Passphrase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passphrase");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("register_time");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("soft_deleted");

                    b.Property<bool>("State")
                        .HasColumnType("boolean")
                        .HasColumnName("state");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("SoftDeleted")
                        .HasDatabaseName("ix_user_soft_deleted");

                    b.HasIndex("Username", "SoftDeleted")
                        .IsUnique()
                        .HasDatabaseName("ix_user_username_soft_deleted");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("181256b6-4c8c-4fca-8b5d-5150f831c3f3"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "unknow",
                            Nick = "initial-developer",
                            Passphrase = "ZLdMAg0N2xN8NbXr5wsoevc/bBay/lJT4sLFbUClwTI=",
                            Phone = "unknow",
                            RegisterTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Salt = "ue9OQmiW1aH5gzkFKXEB84ToTcHjuroMdzDxymov0CA=",
                            SoftDeleted = false,
                            State = false,
                            Username = "developer"
                        },
                        new
                        {
                            Id = new Guid("7b0c873e-8437-4a8c-8712-bb81c2c796d5"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "unknow",
                            Nick = "initial-admin",
                            Passphrase = "qLGu+48XZDn5UC5TmgIgwb+29lIXYVA1i1vjPAjSY1A=",
                            Phone = "unknow",
                            RegisterTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Salt = "hxF4RZh/IdmJmTuzjBChb1d5vdotQmESgTkxJ1Yede0=",
                            SoftDeleted = false,
                            State = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Account.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_role_user_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Authority.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean")
                        .HasColumnName("favorite");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<bool>("IsLink")
                        .HasColumnType("boolean")
                        .HasColumnName("is_link");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modifier_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer")
                        .HasColumnName("order_num");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("Route")
                        .HasColumnType("text")
                        .HasColumnName("route");

                    b.Property<string>("ScopeCode")
                        .HasColumnType("text")
                        .HasColumnName("scope_code");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("soft_deleted");

                    b.Property<bool>("State")
                        .HasColumnType("boolean")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.HasKey("Id")
                        .HasName("pk_menu");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_menu_code");

                    b.HasIndex("OrderNum")
                        .HasDatabaseName("ix_menu_order_num");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_menu_parent_id");

                    b.ToTable("menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9df3280-8ab1-4b45-8d6a-6c3e669317ac"),
                            Code = "root",
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "root menu",
                            Favorite = false,
                            IsLink = false,
                            Level = 0,
                            Name = "Root",
                            OrderNum = -1,
                            Path = "root",
                            SoftDeleted = false,
                            State = false,
                            Type = 1,
                            Visible = true
                        });
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Authority.RoleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("menu_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_menu");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("ix_role_menu_menu_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_menu_role_id");

                    b.ToTable("role_menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MenuId = new Guid("e9df3280-8ab1-4b45-8d6a-6c3e669317ac"),
                            RoleId = new Guid("e8df3280-8ab1-4b45-8d6a-6c3e669317ac")
                        },
                        new
                        {
                            Id = 2L,
                            MenuId = new Guid("e9df3280-8ab1-4b45-8d6a-6c3e669317ac"),
                            RoleId = new Guid("4fe6ebb8-5001-40b4-a59e-d193ad9186f8")
                        });
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Location.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address")
                        .HasComment("地址");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code")
                        .HasComment("建筑物编号");

                    b.Property<DateTime?>("ConstructionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("construction_date")
                        .HasComment("建造日期");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modifier_id");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude")
                        .HasComment("纬度");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude")
                        .HasComment("经度");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("建筑物名称");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer")
                        .HasColumnName("order_num");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("soft_deleted");

                    b.HasKey("Id")
                        .HasName("pk_building");

                    b.ToTable("building", (string)null);
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Location.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area")
                        .HasComment("楼层面积（平方米）");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid")
                        .HasColumnName("building_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code")
                        .HasComment("楼层编号");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("楼层名称");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_rooms")
                        .HasComment("房间数量");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer")
                        .HasColumnName("order_num");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_floor");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_floor_building_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_floor_parent_id");

                    b.ToTable("floor", (string)null);
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Location.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code")
                        .HasComment("房间编号");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("FloorId")
                        .HasColumnType("uuid")
                        .HasColumnName("floor_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id")
                        .HasComment("属于同一个房间组");

                    b.Property<double>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height")
                        .HasComment("房间高度（米）");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modifier_id");

                    b.Property<double>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length")
                        .HasComment("房间长度（米）");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("房间名称");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer")
                        .HasColumnName("order_num");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer")
                        .HasColumnName("purpose")
                        .HasComment("房间用途");

                    b.Property<double>("Width")
                        .HasColumnType("double precision")
                        .HasColumnName("width")
                        .HasComment("房间宽度（米）");

                    b.HasKey("Id")
                        .HasName("pk_room");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_room_floor_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_room_parent_id");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Account.User", b =>
                {
                    b.OwnsOne("HgznMes.Domain.ValueObjects.UserValue.Detail", "Detail", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<string>("AboutMe")
                                .HasColumnType("text")
                                .HasColumnName("about_me");

                            b1.Property<int>("Gender")
                                .HasColumnType("integer")
                                .HasColumnName("gender");

                            b1.HasKey("UserId")
                                .HasName("pk_detail");

                            b1.ToTable("detail");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_detail_user_user_id");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("HgznMes.Domain.ValueObjects.UserValue.Setting", "Settings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.HasKey("UserId")
                                .HasName("pk_setting");

                            b1.ToTable("setting");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_setting_user_user_id");

                            b1.Navigation("User");
                        });

                    b.Navigation("Detail");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Account.UserRole", b =>
                {
                    b.HasOne("HgznMes.Domain.Entities.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("HgznMes.Domain.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Authority.Menu", b =>
                {
                    b.HasOne("HgznMes.Domain.Entities.Authority.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_menu_menu_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Authority.RoleMenu", b =>
                {
                    b.HasOne("HgznMes.Domain.Entities.Authority.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_menu_menu_menu_id");

                    b.HasOne("HgznMes.Domain.Entities.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_menu_role_role_id");
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Location.Floor", b =>
                {
                    b.HasOne("HgznMes.Domain.Entities.Location.Building", null)
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_floor_building_building_id");

                    b.HasOne("HgznMes.Domain.Entities.Location.Building", "Building")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_floor_building_parent_id");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Location.Room", b =>
                {
                    b.HasOne("HgznMes.Domain.Entities.Location.Floor", null)
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_room_floor_floor_id");

                    b.HasOne("HgznMes.Domain.Entities.Location.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_room_floor_parent_id");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Location.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HgznMes.Domain.Entities.Location.Floor", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
